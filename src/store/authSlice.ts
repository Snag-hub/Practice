import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface AuthState {
  token: string | null; // Store the access token
  validupto: string | null; // Expiry date for the token
  refreshtoken: string | null; // Store the refresh token
  refreshtokenvalidupto: string | null; // Expiry date for the refresh token
}

const initialState: AuthState = {
  token: null,
  validupto: null,
  refreshtoken: null,
  refreshtokenvalidupto: null,
};

// Create the auth slice
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setAuthData: (state, action: PayloadAction<AuthState>) => {
      // Update the authentication state with the provided data
      state.token = action.payload.token;
      state.validupto = action.payload.validupto;
      state.refreshtoken = action.payload.refreshtoken;
      state.refreshtokenvalidupto = action.payload.refreshtokenvalidupto;
    },
    clearAuthData: (state) => {
      // Clear the authentication state
      state.token = null;
      state.validupto = null;
      state.refreshtoken = null;
      state.refreshtokenvalidupto = null;
    },
  },
});

// Export the actions generated by the slice
export const { setAuthData, clearAuthData } = authSlice.actions;

// Export the reducer to be used in the store
export default authSlice.reducer;
